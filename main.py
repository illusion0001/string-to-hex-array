import argparse

def string_to_uint_hex_array(input_string, bits=32):
    if bits not in (8, 32, 64):
        raise ValueError("bits parameter must be either 8, 32, or 64")

    lines = input_string.splitlines()
    commented_lines = [f'// {line}' for line in lines]
    input_bytes = input_string.encode('utf-8')

    if bits == 8:
        padding = b'\x00' * (1 - len(input_bytes) % 1)
        chunk_size = 1
        data_type = 'uint8_t'
        format_string = '0x{:02x}'
    elif bits == 32:
        padding = b'\x00' * (4 - len(input_bytes) % 4)
        chunk_size = 4
        data_type = 'uint32_t'
        format_string = '0x{:08x}'
    elif bits == 64:
        padding = b'\x00' * (8 - len(input_bytes) % 8)
        chunk_size = 8
        data_type = 'uint64_t'
        format_string = '0x{:016x}'

    padded_bytes = input_bytes + padding

    # split the padded bytes into chunks
    chunks = [padded_bytes[i:i+chunk_size] for i in range(0, len(padded_bytes), chunk_size)]

    num_elements = len(chunks)

    hex_array = []
    for chunk in chunks:
        value = int.from_bytes(chunk, byteorder='little')
        hex_representation = format_string.format(value)
        hex_array.append(hex_representation)

    return commented_lines, num_elements, data_type, hex_array

def main():
    parser = argparse.ArgumentParser(description="Convert a string to a uint hex array.")
    parser.add_argument("input", help="Input string or path to a text file.")
    parser.add_argument("--bits", type=int, choices=[8, 32, 64], default=32, help="Bits for the output array (8, 32, or 64).")
    parser.add_argument("--array_name", type=str, default="array_str", help="Name of the output array.")
    
    args = parser.parse_args()
    
    input_string = args.input
    if input_string.endswith('.txt'):
        with open(input_string, 'r', encoding='utf-8') as f:
            input_string = f.read()

    commented_lines, num_elements, data_type, hex_array = string_to_uint_hex_array(input_string, bits=args.bits)
    array_name = args.array_name
    print(f'// auto generated by char to u{args.bits}. please don\'t edit this manually.')
    print(f'// string length ({len(input_string)})')
    for comment in commented_lines:
        print(comment)
    print(f'{data_type} {array_name}[{num_elements}];')
    for idx, hex_value in enumerate(hex_array):
        print(f"{array_name}[{idx}] = {hex_value};")

if __name__ == "__main__":
    main()
