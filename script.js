function stringToUintHexArray(inputString, bits)
{
    if (![8, 32, 64].includes(bits))
    {
        throw new Error("bits parameter must be 8, 32, or 64");
    }

    const lines = inputString.split('\n');
    const commentedLines = lines.map(line => `// ${line}`);
    const inputBytes = new TextEncoder().encode(inputString);

    // Add null byte to terminate the string
    const terminatedBytes = new Uint8Array([...inputBytes, 0]);

    let padding, chunkSize, dataType, formatString;
    if (bits === 8)
    {
        padding = new Uint8Array(0);
        chunkSize = 1;
        dataType = 'uint8_t';
        formatString = value => `0x${value.toString(16)}`;
    }
    else if (bits === 32)
    {
        padding = new Uint8Array((4 - (terminatedBytes.length % 4)) % 4).fill(0);
        chunkSize = 4;
        dataType = 'uint32_t';
        formatString = value => `0x${value.toString(16)}`;
    }
    else if (bits === 64)
    {
        padding = new Uint8Array((8 - (terminatedBytes.length % 8)) % 8).fill(0);
        chunkSize = 8;
        dataType = 'uint64_t';
        formatString = value => `0x${value.toString(16)}`;
    }

    const paddedBytes = new Uint8Array([...terminatedBytes, ...padding]);

    const chunks = [];
    for (let i = 0; i < paddedBytes.length; i += chunkSize)
    {
        chunks.push(paddedBytes.slice(i, i + chunkSize));
    }

    const numElements = chunks.length;

    const hexArray = chunks.map(chunk =>
        {
        let value = 0n;
        for (let i = 0; i < chunk.length; i++)
        {
            value += BigInt(chunk[i]) << BigInt(8 * i);
        }
        return formatString(value);
    });

    return { commentedLines, numElements, dataType, hexArray };
}

function generateHexArray()
{
    const inputString = document.getElementById('inputString').value;
    const bits = parseInt(document.getElementById('bits').value, 10);
    const arrayName = document.getElementById('arrayName').value;

    try
    {
        const { commentedLines, numElements, dataType, hexArray } = stringToUintHexArray(inputString, bits);
        let output = `// auto generated by char to u${bits}. please don't edit this manually.\n`;
        output += `// string length (${inputString.length})\n`;
        commentedLines.forEach(comment => output += `${comment}\n`);
        output += `${dataType} ${arrayName}[${numElements}];\n`;
        hexArray.forEach((hexValue, idx) => output += `${arrayName}[${idx}] = ${hexValue};\n`);
        document.getElementById('output').textContent = output.trim();
    }
    catch (error)
    {
        document.getElementById('output').textContent = error.message;
    }
}

function copyToClipboard()
{
    const outputElement = document.getElementById('output');
    const trimmedOutput = outputElement.textContent.trim();
    const tempTextarea = document.createElement('textarea');
    tempTextarea.value = trimmedOutput;
    document.body.appendChild(tempTextarea);
    tempTextarea.select();
    document.execCommand('copy');
    document.body.removeChild(tempTextarea);
}
